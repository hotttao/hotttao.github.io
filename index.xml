<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>LoveIt</title>
        <link>https://hotttao.github.io/</link>
        <description>宋涛的个人博客</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1556824234@qq.com (宋涛)</managingEditor>
            <webMaster>1556824234@qq.com (宋涛)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 17 Feb 2022 21:00:00 &#43;0800</lastBuildDate>
            <atom:link href="https://hotttao.github.io/index.xml" rel="self" type="application/rss+xml" />
        <item>
    <title>要写点什么</title>
    <link>https://hotttao.github.io/posts/about/</link>
    <pubDate>Thu, 17 Feb 2022 21:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/about/</guid>
    <description><![CDATA[<p>写博客也挺久了，是时候重构一下博客的内容了。</p>]]></description>
</item><item>
    <title>Go 并发调试工具</title>
    <link>https://hotttao.github.io/posts/program/go/tool/go_exe/race_check/</link>
    <pubDate>Thu, 01 Jul 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/tool/go_exe/race_check/</guid>
    <description><![CDATA[Go 语言提供了一些并发调试工具，这些工具可以帮我们有效的发现并发编程中的 bug 1. Go race detector Go race detector可以帮助我们自动发现程序有没有数据竞争(]]></description>
</item><item>
    <title>Mutex 扩展</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_4/</link>
    <pubDate>Mon, 03 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_4/</guid>
    <description><![CDATA[<div class="featured-image">
                <img src="/" referrerpolicy="no-referrer">
            </div>如何基于 Mutex 实现一个可重入锁 1. Mutex 的扩展 上一节我们介绍了 Mutex 的实现原理，这一节我们来看看如何基于标准库的 Mutex 来扩展 Mutex 提供的并发原语，包括: 实现一个可]]></description>
</item><item>
    <title>Go Mutex 设计与实现</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_2/</link>
    <pubDate>Sun, 02 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_2/</guid>
    <description><![CDATA[Go 第一个并发原语 Mutex 互斥锁 1. Mutex 的使用 互斥锁是最基本的并发原语，使用互斥锁，限定临界区只能同时由一个线程持有。基本上所有编程语言都会提供，Go 中]]></description>
</item><item>
    <title>go 并发编程入门指南</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_1/</link>
    <pubDate>Sat, 01 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_1/</guid>
    <description><![CDATA[这个系列我们开始学习 Go 语言的第四个部分: 并发编程。 1. 学习内容 Go 语言的并发编程，我们学习的核心内容来自于极客时间的专栏Go 并发编程实战课，作者]]></description>
</item><item>
    <title>go hacker 编程</title>
    <link>https://hotttao.github.io/posts/program/go/grammar/go_11/</link>
    <pubDate>Mon, 11 Jan 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/grammar/go_11/</guid>
    <description><![CDATA[每个语言都有一些 hacker 编程，这些 hacker 编程在某些时候能起到奇效，但是不能被乱用。 1. 获取 goroutine id 获取 goroutine id，方式有两种，分别是 简单方式：通过 runtime.Stack 方法获取栈帧]]></description>
</item><item>
    <title>go 包和管理工具</title>
    <link>https://hotttao.github.io/posts/program/go/grammar/go_10/</link>
    <pubDate>Sun, 10 Jan 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/grammar/go_10/</guid>
    <description><![CDATA[go 程序包组织结构和程序管理工具箱 1. 包简介 包和模块的概念几乎存在于所有的编程语言之中，它的存在是为了简化大型程序的设计和维护工作。通过将一组相]]></description>
</item><item>
    <title>go reflect</title>
    <link>https://hotttao.github.io/posts/program/go/grammar/go_9/</link>
    <pubDate>Sat, 09 Jan 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/grammar/go_9/</guid>
    <description><![CDATA[go 反射机制 1. 反射机制 反射是一个复杂的内省技术。所谓内省即可以动态获取变量的类型，值，以及方法属性等元数据。需要反射的根本原因是，很多时候我们]]></description>
</item><item>
    <title>go 并发编程</title>
    <link>https://hotttao.github.io/posts/program/go/grammar/go_8/</link>
    <pubDate>Fri, 08 Jan 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/grammar/go_8/</guid>
    <description><![CDATA[Go 并发编程原语，Goroutines和Channels 1. GO 并发编程简介 上一篇我们讲解了 Go 语言中的接口，至此对于 Go 语言的类型系统我们基本上讲的]]></description>
</item><item>
    <title>go 接口</title>
    <link>https://hotttao.github.io/posts/program/go/grammar/go_7/</link>
    <pubDate>Thu, 07 Jan 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/grammar/go_7/</guid>
    <description><![CDATA[Go 的泛型编程 1. 接口概述 接口是 Go 语言提供的泛型的核心概念。所谓泛型就是允许程序员在强类型程序设计语言中编写代码时使用一些以后才指定的类型，目的]]></description>
</item></channel>
</rss>
