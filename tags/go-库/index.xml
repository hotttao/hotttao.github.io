<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>go 库 - 标签 - LoveIt</title>
        <link>https://hotttao.github.io/tags/go-%E5%BA%93/</link>
        <description>go 库 - 标签 - LoveIt</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1556824234@qq.com (宋涛)</managingEditor>
            <webMaster>1556824234@qq.com (宋涛)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 23 Jun 2021 22:00:00 &#43;0800</lastBuildDate><atom:link href="https://hotttao.github.io/tags/go-%E5%BA%93/" rel="self" type="application/rss+xml" /><item>
    <title>Go Work Pool</title>
    <link>https://hotttao.github.io/posts/program/go/modules/sync/work_pool/</link>
    <pubDate>Wed, 23 Jun 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/modules/sync/work_pool/</guid>
    <description><![CDATA[我们在 Go 第四部分 Go 并发系列的 sync.Pool 和 channel 提到了很多用于 Go 协程池的第三方库，今天我们就来详细介绍它们的使用和实现。 1. worker 池 我们的第一个示例来自Marc]]></description>
</item><item>
    <title>go 对象池化</title>
    <link>https://hotttao.github.io/posts/program/go/modules/sync/obj_pool/</link>
    <pubDate>Tue, 22 Jun 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/modules/sync/obj_pool/</guid>
    <description><![CDATA[我们在 Go 第四部分 Go 并发系列的 sync.Pool 提到了很多用于对象池化的第三方库，今天我们就来详细看看其中提到的对象池化库的使用和实现。 1. buffer 池化 2. TCP 连接池 3. 数]]></description>
</item><item>
    <title>命令行管理工具 Cobra</title>
    <link>https://hotttao.github.io/posts/program/go/modules/cmdline/cobra/</link>
    <pubDate>Mon, 21 Jun 2021 10:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/modules/cmdline/cobra/</guid>
    <description><![CDATA[我们在前面已经学习了 flag/pflag/viper 命令行、配置文件管理的使用，接下来就到了我们今天的主角 cobra 了: cobra 与 viper 没有直接关系，viper 提供的是一个收纳配置参数的容]]></description>
</item><item>
    <title>命令行参数 - flag/pflag</title>
    <link>https://hotttao.github.io/posts/program/go/modules/cmdline/flag/</link>
    <pubDate>Mon, 21 Jun 2021 09:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/modules/cmdline/flag/</guid>
    <description><![CDATA[Cobra 是 Go 语言里面命令行参数的事实标准，基本上很多项目都在使用。Cobra 把命令行参数的实现分成了三个独立的 package: pflag: 对标准库中的 flag 的扩展 viper: 配置管理 cobra:]]></description>
</item><item>
    <title>配置管理神 Viper</title>
    <link>https://hotttao.github.io/posts/program/go/modules/cmdline/viper/</link>
    <pubDate>Mon, 21 Jun 2021 08:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/modules/cmdline/viper/</guid>
    <description><![CDATA[1. viper 1.1 viper 简介 Viper 是适用于Go应用程序的完整配置解决方案。可以处理所有类型的配置需求和格式。作为配置管理器，Viper 按照如下的从高到低的优先级]]></description>
</item><item>
    <title>crypt/config 从 K/V 存储中读取数据</title>
    <link>https://hotttao.github.io/posts/program/go/modules/cmdline/crypt/</link>
    <pubDate>Mon, 21 Jun 2021 07:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/modules/cmdline/crypt/</guid>
    <description><![CDATA[xordataexchange/crypt 提供了从 K/V 存储中读取配置的方法。]]></description>
</item><item>
    <title>Gin</title>
    <link>https://hotttao.github.io/posts/program/go/modules/web/gin/</link>
    <pubDate>Mon, 07 Jun 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/modules/web/gin/</guid>
    <description><![CDATA[在 go 网络库 net/http 的请求处理过程 中我们解析了 net/http 的请求处理流程。并说到所有基于 net/http 的 web 框架定制的其实就是 Server 中的下面几个部分: Handler: 实现更丰富的路由 Context: 实现更]]></description>
</item><item>
    <title>gorilla mutex 路由库</title>
    <link>https://hotttao.github.io/posts/program/go/modules/sync/gorilla_mux/</link>
    <pubDate>Mon, 07 Jun 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/modules/sync/gorilla_mux/</guid>
    <description><![CDATA[另一个路由实现 https://github.com/gorilla/mux]]></description>
</item><item>
    <title>go net/http https 的使用</title>
    <link>https://hotttao.github.io/posts/program/go/modules/net/https/</link>
    <pubDate>Sun, 06 Jun 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/modules/net/https/</guid>
    <description><![CDATA[1. 启用 https 服务 1.1 服务器端 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 package main import ( &#34;fmt&#34; &#34;net/http&#34; ) func main() { http.HandleFunc(&#34;/&#34;, func(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, &#34;Hello, World!\n&#34;) }) // 启用 https 服务 fmt.Println(http.ListenAndServeTLS(&#34;localhost:8081&#34;, &#34;../server-signed-by-ca.crt&#34;, &#34;../server.key&#34;, nil)) // 启用 http 服务 // http.ListenAndServe(&#34;localhost:8080&#34;, nil) } 1.2]]></description>
</item><item>
    <title>go 网络库 net/http 的请求处理过程</title>
    <link>https://hotttao.github.io/posts/program/go/modules/net/http/</link>
    <pubDate>Sun, 06 Jun 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/modules/net/http/</guid>
    <description><![CDATA[1. net/http 库结构 我们先来看一个最简单的 http server: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 package web import ( &#34;fmt&#34; &#34;log&#34; &#34;net/http&#34; ) func StartWebServer() { http.HandleFunc(&#34;/hello&#34;, func(w http.ResponseWriter, r *http.Request) { fmt.Fprintf(w, &#34;hello, %q&#34;, &#34;tsong&#34;) }) http.ListenAndServe(&#34;:8080&#34;, nil) } // net/http 库 func ListenAndServe(addr string, handler]]></description>
</item></channel>
</rss>
