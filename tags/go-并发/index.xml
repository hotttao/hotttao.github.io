<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>go 并发 - 标签 - LoveIt</title>
        <link>https://hotttao.github.io/tags/go-%E5%B9%B6%E5%8F%91/</link>
        <description>go 并发 - 标签 - LoveIt</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1556824234@qq.com (宋涛)</managingEditor>
            <webMaster>1556824234@qq.com (宋涛)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 20 May 2021 22:00:00 &#43;0800</lastBuildDate><atom:link href="https://hotttao.github.io/tags/go-%E5%B9%B6%E5%8F%91/" rel="self" type="application/rss+xml" /><item>
    <title>go 分布式并发原语二</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_21/</link>
    <pubDate>Thu, 20 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_21/</guid>
    <description><![CDATA[1. 分布式队列 1.1 基础使用 etcd 通过 github.com/coreos/etcd/contrib/recipes 包提供了分布式队列这种数据结构。其类型和方法的签名如下: 1 2 3 4 5 6 7 8 // 创建队列 func NewQueue(client *v3.Client, keyPrefix string) *Queue // 入队 func (q *Queue) Enqueue(val string)]]></description>
</item><item>
    <title>go 分布式并发原语一</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_20/</link>
    <pubDate>Wed, 19 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_20/</guid>
    <description><![CDATA[1. 分布式并发原语概述 在前面的课程里，我们学习的并发原语都是在进程内使用的，即一个运行程序为了控制共享资源、实现任务编排和进行消息传递而提供的]]></description>
</item><item>
    <title>go 分组操作的并发控制</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_19/</link>
    <pubDate>Tue, 18 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_19/</guid>
    <description><![CDATA[1. 分组操作概述 共享资源保护、任务编排和消息传递是 Go 并发编程中常见的场景，而分组执行一批相同的或类似的任务则是任务编排中一类情形，本节我们来介]]></description>
</item><item>
    <title>go CyclicBarrier 循环栅栏</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_18/</link>
    <pubDate>Mon, 17 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_18/</guid>
    <description><![CDATA[1. CyclicBarrier 概述 CyclicBarrier 是一个可重用的栅栏并发原语，常常应用于重复进行一组 goroutine 同时执行的场景中。 CyclicBarrier允许一组 goroutine 彼此等待，到达一个共同的]]></description>
</item><item>
    <title>go SingleFlight 请求合并</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_17/</link>
    <pubDate>Sun, 16 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_17/</guid>
    <description><![CDATA[1. SingleFlight 栅栏概述 SingleFlight 的作用是将并发请求合并成一个请求，以减少对下层服务的压力。当多个 goroutine 同时调用同一个函数的时候，只让一个 goroutine 去调用这个函数，等到这个]]></description>
</item><item>
    <title>go 信号量</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_16/</link>
    <pubDate>Sat, 15 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_16/</guid>
    <description><![CDATA[1. 信号量概述 信号量（Semaphore）是用来控制多个 goroutine 同时访问多个资源的并发原语。最简单的信号量就是一个变量加一些并发控制的能力，更复杂的]]></description>
</item><item>
    <title>go 内存模型</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_15/</link>
    <pubDate>Fri, 14 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_15/</guid>
    <description><![CDATA[1. Go 内存模型概述 Go 内存模型 描述的是并发环境中多 goroutine 读相同变量的时候，变量的可见性条件。具体点说，就是指，在什么条件下，goroutine 在读取]]></description>
</item><item>
    <title>Channel 应用</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_14/</link>
    <pubDate>Thu, 13 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_14/</guid>
    <description><![CDATA[1. 使用反射操作 Channel 在学习如何使用 Channel 之前，我们来看看如何通过反射的方式执行 select 语句，这在处理很多的 case clause，尤其是不定长的 case clause 的时候，非常有]]></description>
</item><item>
    <title>Channel 使用与实现</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_13/</link>
    <pubDate>Wed, 12 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_13/</guid>
    <description><![CDATA[1. Channel 概述 1.1 CSP 模型 要想了解 Channel，我们要先追溯到 CSP 模型。CSP 是 Communicating Sequential Process 的简称，中文直译为通信顺序进程，或者叫做交换信息的循序进程，是用]]></description>
</item><item>
    <title>Atomic 原子操作</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_12/</link>
    <pubDate>Tue, 11 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_12/</guid>
    <description><![CDATA[1. Atomic 概述 1.1 原子操作 Package sync/atomic 实现了同步算法底层的原子的内存操作原语。之所以叫原子操作，是因为一个原子在执行的时候，其它线程不会看到执行一半的操作结]]></description>
</item></channel>
</rss>
