<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>go 并发 - 标签 - LoveIt</title>
        <link>https://hotttao.github.io/tags/go-%E5%B9%B6%E5%8F%91/</link>
        <description>go 并发 - 标签 - LoveIt</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1556824234@qq.com (宋涛)</managingEditor>
            <webMaster>1556824234@qq.com (宋涛)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 15 May 2021 22:00:00 &#43;0800</lastBuildDate><atom:link href="https://hotttao.github.io/tags/go-%E5%B9%B6%E5%8F%91/" rel="self" type="application/rss+xml" /><item>
    <title>go 信号量</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_16/</link>
    <pubDate>Sat, 15 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_16/</guid>
    <description><![CDATA[1. 信号量概述 信号量（Semaphore）是用来控制多个 goroutine 同时访问多个资源的并发原语。最简单的信号量就是一个变量加一些并发控制的能力，更复杂的]]></description>
</item><item>
    <title>go 内存模型</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_15/</link>
    <pubDate>Fri, 14 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_15/</guid>
    <description><![CDATA[1. Go 内存模型概述 Go 内存模型 描述的是并发环境中多 goroutine 读相同变量的时候，变量的可见性条件。具体点说，就是指，在什么条件下，goroutine 在读取]]></description>
</item><item>
    <title>Channel 应用</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_14/</link>
    <pubDate>Thu, 13 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_14/</guid>
    <description><![CDATA[1. 使用反射操作 Channel 在学习如何使用 Channel 之前，我们来看看如何通过反射的方式执行 select 语句，这在处理很多的 case clause，尤其是不定长的 case clause 的时候，非常有]]></description>
</item><item>
    <title>Channel 使用与实现</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_13/</link>
    <pubDate>Wed, 12 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_13/</guid>
    <description><![CDATA[1. Channel 概述 1.1 CSP 模型 要想了解 Channel，我们要先追溯到 CSP 模型。CSP 是 Communicating Sequential Process 的简称，中文直译为通信顺序进程，或者叫做交换信息的循序进程，是用]]></description>
</item><item>
    <title>Atomic 原子操作</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_12/</link>
    <pubDate>Tue, 11 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_12/</guid>
    <description><![CDATA[1. Atomic 概述 1.1 原子操作 Package sync/atomic 实现了同步算法底层的原子的内存操作原语。之所以叫原子操作，是因为一个原子在执行的时候，其它线程不会看到执行一半的操作结]]></description>
</item><item>
    <title>go Context</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_11/</link>
    <pubDate>Mon, 10 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_11/</guid>
    <description><![CDATA[1. Context 概述 所谓上下文指的是在 API 之间或者方法调用之间，所传递的除了业务参数之外的额外信息，比如服务追踪。Go 标准库中的 Context 不仅仅传递上下文信息还提]]></description>
</item><item>
    <title>go Pool</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_10/</link>
    <pubDate>Sun, 09 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_10/</guid>
    <description><![CDATA[1. Pool 概述 Go 是一个自动垃圾回收的编程语言，采用三色并发标记算法标记对象并回收。但是，如果你想使用 Go 开发一个高性能的应用程序的话，就必须考虑垃圾]]></description>
</item><item>
    <title>线程安全的 map</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_9/</link>
    <pubDate>Sat, 08 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_9/</guid>
    <description><![CDATA[线程安全的 map 1. 线程安全的 map 概述 1.1 map 的基本使用 键类型 Go 内建的 map 类型如下： 1 map[K]V 其中，key 类型的 K 必须是可比较的（comparable），在 Go 语]]></description>
</item><item>
    <title>Once 实现单例</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_8/</link>
    <pubDate>Fri, 07 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_8/</guid>
    <description><![CDATA[Once 有且仅有一次执行 1. Once 概述 Once 可以用来执行且仅仅执行一次动作：Once 常常用来初始化单例资源，或者并发访问只需初始化一次的共享资源，或者在测试]]></description>
</item><item>
    <title>Cond 条件变量</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_7/</link>
    <pubDate>Thu, 06 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_7/</guid>
    <description><![CDATA[Cond 条件变量 1. Cond 概述 Go 标准库提供 Cond 原语的目的是，为等待 / 通知场景下的并发问题提供支持。Cond 通常应用于等待某个条件的一组 goroutine，]]></description>
</item></channel>
</rss>
