<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>go 惯例 - 标签 - LoveIt</title>
        <link>https://hotttao.github.io/tags/go-%E6%83%AF%E4%BE%8B/</link>
        <description>go 惯例 - 标签 - LoveIt</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1556824234@qq.com (宋涛)</managingEditor>
            <webMaster>1556824234@qq.com (宋涛)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 03 Apr 2021 22:00:00 &#43;0800</lastBuildDate><atom:link href="https://hotttao.github.io/tags/go-%E6%83%AF%E4%BE%8B/" rel="self" type="application/rss+xml" /><item>
    <title>go API 设计</title>
    <link>https://hotttao.github.io/posts/program/go/practice/engineering/project_api/</link>
    <pubDate>Sat, 03 Apr 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/practice/engineering/project_api/</guid>
    <description><![CDATA[前面我们介绍 Go 项目工程化提到了 /api 目录。这目录是协议定义目录，用于存放约定项目接口的 IDL 文件。按照现在的主流基本都是 Protobuf 文件。Protobuf 的管]]></description>
</item><item>
    <title>go 配置管理</title>
    <link>https://hotttao.github.io/posts/program/go/practice/engineering/project_config/</link>
    <pubDate>Sat, 03 Apr 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/practice/engineering/project_config/</guid>
    <description><![CDATA[参考 极客时间-毛剑老师的 Go 工程化实践 Go项目标准布局]]></description>
</item><item>
    <title>go 工程化项目结构</title>
    <link>https://hotttao.github.io/posts/program/go/practice/engineering/project_structure/</link>
    <pubDate>Thu, 01 Apr 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/practice/engineering/project_structure/</guid>
    <description><![CDATA[最近几篇文章与 Go 工程化方面有关，算是我们 Go 语言学习的第二部分，了解一门语言的惯例，即最佳实践。无论是做什么开发，在做之前先 google 一下 best practice 是一个非]]></description>
</item><item>
    <title>Go Visitor 模式</title>
    <link>https://hotttao.github.io/posts/program/go/practice/design/go_design_8/</link>
    <pubDate>Mon, 08 Mar 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/practice/design/go_design_8/</guid>
    <description><![CDATA[K8S Visitor 模式，这篇文章摘录自耗子哥博客-Go编程模式 1. K8S Visitor 模式 本篇文章主要想讨论一下，Kubernetes 的 kubectl 命令中的使用到到的一个编程模式 – Visitor]]></description>
</item><item>
    <title>Go PIPELINE</title>
    <link>https://hotttao.github.io/posts/program/go/practice/design/go_design_7/</link>
    <pubDate>Sun, 07 Mar 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/practice/design/go_design_7/</guid>
    <description><![CDATA[Go 流处理编程模式，这篇文章摘录自耗子哥博客-Go编程模式 1. Pipeline 模式 对于Pipeline用过Unix/Linux命令行的人都不会陌生，他是一种把]]></description>
</item><item>
    <title>Go 装饰器</title>
    <link>https://hotttao.github.io/posts/program/go/practice/design/go_design_6/</link>
    <pubDate>Sat, 06 Mar 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/practice/design/go_design_6/</guid>
    <description><![CDATA[Go 的装饰器，这篇文章摘录自耗子哥博客-Go编程模式 1. 装饰器 装饰器是一种函数式编程的玩法——用一个高阶函数来包装一下。所以，Go语言的修饰器编]]></description>
</item><item>
    <title>Go 代码生成和泛型</title>
    <link>https://hotttao.github.io/posts/program/go/practice/design/go_design_5/</link>
    <pubDate>Fri, 05 Mar 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/practice/design/go_design_5/</guid>
    <description><![CDATA[Go 的泛型和代码生成，这篇文章摘录自耗子哥博客-Go编程模式 1. 泛型 接下来我们学习一下Go语言的代码生成的玩法。Go语言代码生成主要还是用来解决]]></description>
</item><item>
    <title>委托和反转控制</title>
    <link>https://hotttao.github.io/posts/program/go/practice/design/go_design_4/</link>
    <pubDate>Thu, 04 Mar 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/practice/design/go_design_4/</guid>
    <description><![CDATA[反转控制，这篇文章摘录自耗子哥博客-Go编程模式 1. 嵌入和委托 1.1 反转控制 反转控制IoC – Inversion of Control 是一种软件设计的方法，其主要的思想是把控制逻辑与]]></description>
</item><item>
    <title>Builder模式与Function Options</title>
    <link>https://hotttao.github.io/posts/program/go/practice/design/go_design_3/</link>
    <pubDate>Wed, 03 Mar 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/practice/design/go_design_3/</guid>
    <description><![CDATA[Go 语言中的可选参数与创建型模式。这篇文章摘录自耗子哥博客-Go编程模式 1. Function Options Functional Options 编程模式是一个函数式编程的应用案例，与传统的 Builder 模式有关，编程]]></description>
</item><item>
    <title>go 错误处理</title>
    <link>https://hotttao.github.io/posts/program/go/practice/design/go_design_2/</link>
    <pubDate>Tue, 02 Mar 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/practice/design/go_design_2/</guid>
    <description><![CDATA[Go 错误处理。这篇文章摘录自耗子哥博客-Go编程模式 1.错误处理 错误处理一直以一是编程必需要面对的问题，不同的语言有不同的出现处理的方式，Go]]></description>
</item></channel>
</rss>
