<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>python 库 - 标签 - LoveIt</title>
        <link>https://hotttao.github.io/tags/python-%E5%BA%93/</link>
        <description>python 库 - 标签 - LoveIt</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1556824234@qq.com (宋涛)</managingEditor>
            <webMaster>1556824234@qq.com (宋涛)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 09 Jun 2018 22:10:00 &#43;0800</lastBuildDate><atom:link href="https://hotttao.github.io/tags/python-%E5%BA%93/" rel="self" type="application/rss+xml" /><item>
    <title>virtualenv</title>
    <link>https://hotttao.github.io/posts/program/python/modules/virtualenv/</link>
    <pubDate>Sat, 09 Jun 2018 22:10:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/python/modules/virtualenv/</guid>
    <description><![CDATA[1. 环境创建 virtualenv dirname &ndash; 创建虚拟环境 source dirname/bin/activate &ndash; 启用虚拟环境 virtualenv 可用选项 作用 &ndash;distribute dirname 创建新的虚拟环境，并安装 pip &ndash;no-site-packages 使系统环境的包对虚拟环境不可见 2.virtualenvwrapper 作用：virtu]]></description>
</item><item>
    <title>supervisor tornado 部署</title>
    <link>https://hotttao.github.io/posts/program/python/modules/supervisor_tornado/</link>
    <pubDate>Fri, 08 Jun 2018 22:10:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/python/modules/supervisor_tornado/</guid>
    <description><![CDATA[1. tornado 启动 1 2 3 4 5 6 7 8 9 10 11 12 13 from tornado.netutil import set_close_exec def main(): app = AnalyticApiApplication() http_serve = httpserver.HTTPServer(app) # http_serve.listen(options.port) # supervisor 创建的监听套接字文件描述符，通过 0 号传递给 tornado的所有进程 sock = socket.fromfd(0, family=socket.AF_INET,]]></description>
</item><item>
    <title>16 wrapt 模块实战</title>
    <link>https://hotttao.github.io/posts/program/python/modules/wrapt/python_decorator_16/</link>
    <pubDate>Thu, 07 Jun 2018 22:10:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/python/modules/wrapt/python_decorator_16/</guid>
    <description><![CDATA[装饰器和 wrapt 模块的介绍已经结束，作为整个系列的最后一篇的实战篇，我们来实现在一开始我提出的一个需求 1. 应用场景 在我日常的开发过程中，经常要查询各]]></description>
</item><item>
    <title>15 wrapt 模块使用</title>
    <link>https://hotttao.github.io/posts/program/python/modules/wrapt/python_decorator_15/</link>
    <pubDate>Wed, 06 Jun 2018 22:10:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/python/modules/wrapt/python_decorator_15/</guid>
    <description><![CDATA[GrahamDumpleton wrapt blog 的翻译部分到此就结束。很可惜的是作者并没有把猴子补丁部分写完，查阅了 wrapt 的官方文档，上面只介绍了 wrapt 的装饰器，代理对象以及 synchronized 同步装饰器，也]]></description>
</item><item>
    <title>14 为 Python 应用自动打补丁</title>
    <link>https://hotttao.github.io/posts/program/python/modules/wrapt/python_decorator_14/</link>
    <pubDate>Tue, 05 Jun 2018 22:10:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/python/modules/wrapt/python_decorator_14/</guid>
    <description><![CDATA[前面我们已经决绝了猴子补丁的导入次序问题，但是这个解决方案有个前提，就是我们必需能修改应用程序代码，以在程序的最开始执行我们的注册函数。本节]]></description>
</item><item>
    <title>13 猴子补丁在 Python 中的加载次序问题</title>
    <link>https://hotttao.github.io/posts/program/python/modules/wrapt/python_decorator_13/</link>
    <pubDate>Mon, 04 Jun 2018 22:10:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/python/modules/wrapt/python_decorator_13/</guid>
    <description><![CDATA[本节我们就来解决如何在 Python 中打补丁的问题。 1. 猴子补丁的加载次序问题 在第 11 篇博客中，我们提到了应用猴子补丁时可能存在的问题。具体地说，如果需要被]]></description>
</item><item>
    <title>12 使用 wrapt 辅助测试</title>
    <link>https://hotttao.github.io/posts/program/python/modules/wrapt/python_decorator_12/</link>
    <pubDate>Sun, 03 Jun 2018 22:10:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/python/modules/wrapt/python_decorator_12/</guid>
    <description><![CDATA[前面我们说道过 Python 中使用猴子补丁典型情景之一就是使用模拟库来帮助执行单元测试，本节我们先把补丁和模块导入的相对次序问题放一放，先来看看如何使用]]></description>
</item><item>
    <title>11 在 Python 中安全的使用猴子补丁</title>
    <link>https://hotttao.github.io/posts/program/python/modules/wrapt/python_decorator_11/</link>
    <pubDate>Sat, 02 Jun 2018 22:10:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/python/modules/wrapt/python_decorator_11/</guid>
    <description><![CDATA[在之前 10 篇博客中，我们几乎完整的讨论了装饰器的实现。现在我们将焦点从装饰器转移到猴子补丁上来。 1. 猴子补丁 通常在Python中永远不应该做的事]]></description>
</item><item>
    <title>10 装饰类的性能</title>
    <link>https://hotttao.github.io/posts/program/python/modules/wrapt/python_decorator_10/</link>
    <pubDate>Fri, 01 Jun 2018 22:10:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/python/modules/wrapt/python_decorator_10/</guid>
    <description><![CDATA[在上一篇文章中，我们对作为函数闭包实现的装饰器与前文描述的通用装饰器进行了性能比较。本节我们继续我们的性能测试，看看装饰一个类方法时，不同实]]></description>
</item><item>
    <title>09 装饰器性能比较</title>
    <link>https://hotttao.github.io/posts/program/python/modules/wrapt/python_decorator_09/</link>
    <pubDate>Wed, 30 May 2018 22:10:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/python/modules/wrapt/python_decorator_09/</guid>
    <description><![CDATA[前面我们探讨了装饰器的实现方式，并实现了一个所谓的通用装饰器模式，并用它创建了一个类似 Java 的 @synchronized 装饰器作为使用示例。本节我们来看看不同的装饰器实]]></description>
</item></channel>
</rss>
