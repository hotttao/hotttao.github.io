<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Go设计模式 - 标签 - LoveIt</title>
        <link>https://hotttao.github.io/tags/go%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</link>
        <description>Go设计模式 - 标签 - LoveIt</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1556824234@qq.com (宋涛)</managingEditor>
            <webMaster>1556824234@qq.com (宋涛)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 08 Jan 2021 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://hotttao.github.io/tags/go%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/" rel="self" type="application/rss+xml" /><item>
    <title>8. Go Visitor 模式</title>
    <link>https://hotttao.github.io/posts/program/go/practice/design/go_design_8/</link>
    <pubDate>Fri, 08 Jan 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/practice/design/go_design_8/</guid>
    <description><![CDATA[K8S Visitor 模式，这篇文章摘录自耗子哥博客-Go编程模式 1. K8S Visitor 模式 本篇文章主要想讨论一下，Kubernetes 的 kubectl 命令中的使用到到的一个编程模式 – Visitor]]></description>
</item><item>
    <title>7. Go PIPELINE</title>
    <link>https://hotttao.github.io/posts/program/go/practice/design/go_design_7/</link>
    <pubDate>Thu, 07 Jan 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/practice/design/go_design_7/</guid>
    <description><![CDATA[Go 流处理编程模式，这篇文章摘录自耗子哥博客-Go编程模式 1. Pipeline 模式 对于Pipeline用过Unix/Linux命令行的人都不会陌生，他是一种把]]></description>
</item><item>
    <title>6. Go 装饰器</title>
    <link>https://hotttao.github.io/posts/program/go/practice/design/go_design_6/</link>
    <pubDate>Wed, 06 Jan 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/practice/design/go_design_6/</guid>
    <description><![CDATA[Go 的装饰器，这篇文章摘录自耗子哥博客-Go编程模式 1. 装饰器 装饰器是一种函数式编程的玩法——用一个高阶函数来包装一下。所以，Go语言的修饰器编]]></description>
</item><item>
    <title>5. Go 代码生成和泛型</title>
    <link>https://hotttao.github.io/posts/program/go/practice/design/go_design_5/</link>
    <pubDate>Tue, 05 Jan 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/practice/design/go_design_5/</guid>
    <description><![CDATA[Go 的泛型和代码生成，这篇文章摘录自耗子哥博客-Go编程模式 1. 泛型 接下来我们学习一下Go语言的代码生成的玩法。Go语言代码生成主要还是用来解决]]></description>
</item><item>
    <title>4. 委托和反转控制</title>
    <link>https://hotttao.github.io/posts/program/go/practice/design/go_design_4/</link>
    <pubDate>Mon, 04 Jan 2021 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/practice/design/go_design_4/</guid>
    <description><![CDATA[反转控制，这篇文章摘录自耗子哥博客-Go编程模式 1. 嵌入和委托 1.1 反转控制 反转控制IoC – Inversion of Control 是一种软件设计的方法，其主要的思想是把控制逻辑与]]></description>
</item></channel>
</rss>
