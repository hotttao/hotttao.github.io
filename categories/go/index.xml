<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Go - 分类 - LoveIt</title>
        <link>https://hotttao.github.io/categories/go/</link>
        <description>Go - 分类 - LoveIt</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1556824234@qq.com (宋涛)</managingEditor>
            <webMaster>1556824234@qq.com (宋涛)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 01 Jul 2021 22:00:00 &#43;0800</lastBuildDate><atom:link href="https://hotttao.github.io/categories/go/" rel="self" type="application/rss+xml" /><item>
    <title>Go 并发调试工具</title>
    <link>https://hotttao.github.io/posts/program/go/tool/go_exe/race_check/</link>
    <pubDate>Thu, 01 Jul 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/tool/go_exe/race_check/</guid>
    <description><![CDATA[Go 语言提供了一些并发调试工具，这些工具可以帮我们有效的发现并发编程中的 bug 1. Go race detector Go race detector可以帮助我们自动发现程序有没有数据竞争(]]></description>
</item><item>
    <title>go 对象池化</title>
    <link>https://hotttao.github.io/posts/program/go/modules/32_obj_pool/</link>
    <pubDate>Tue, 22 Jun 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/modules/32_obj_pool/</guid>
    <description><![CDATA[我们在 Go 第四部分 Go 并发系列的 sync.Pool 提到了很多用于对象池化的第三方库，今天我们就来详细看看其中提到的对象池化库的使用和实现。 1. buffer 池化 2. TCP 连接池 3. 数]]></description>
</item><item>
    <title>配置管理神 Viper</title>
    <link>https://hotttao.github.io/posts/program/go/modules/31_viper/</link>
    <pubDate>Mon, 21 Jun 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/modules/31_viper/</guid>
    <description><![CDATA[1. Viper 简介 Viper 是适用于Go应用程序的完整配置解决方案。可以处理所有类型的配置需求和格式。作为配置管理器，Viper 按照如下的从高到低的优先级加载]]></description>
</item><item>
    <title>go 网络库 net</title>
    <link>https://hotttao.github.io/posts/program/go/modules/15_net/</link>
    <pubDate>Sun, 06 Jun 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/modules/15_net/</guid>
    <description><![CDATA[go 网络库 net]]></description>
</item><item>
    <title>go 常用数据结构与算法库</title>
    <link>https://hotttao.github.io/posts/program/go/modules/14_algo/</link>
    <pubDate>Sat, 05 Jun 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/modules/14_algo/</guid>
    <description><![CDATA[go 常用数据结构与算法库]]></description>
</item><item>
    <title>go 操作系统交互</title>
    <link>https://hotttao.github.io/posts/program/go/modules/13_os/</link>
    <pubDate>Fri, 04 Jun 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/modules/13_os/</guid>
    <description><![CDATA[go 执行操作系统命令]]></description>
</item><item>
    <title>go 数据格式转换</title>
    <link>https://hotttao.github.io/posts/program/go/modules/12_encoding/</link>
    <pubDate>Thu, 03 Jun 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/modules/12_encoding/</guid>
    <description><![CDATA[1. json 2. yaml 3. ini]]></description>
</item><item>
    <title>go 文本操作</title>
    <link>https://hotttao.github.io/posts/program/go/modules/11_strings/</link>
    <pubDate>Wed, 02 Jun 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/modules/11_strings/</guid>
    <description><![CDATA[1. 字符操作 strings 和 bytes 提供了 go 语言中的字符操作，因为还不不支持泛型，所以这两个包提供了几乎一样的函数和类型，区别仅仅在于一个操作 string，一个]]></description>
</item><item>
    <title>go 的文件 IO</title>
    <link>https://hotttao.github.io/posts/program/go/modules/10_io/</link>
    <pubDate>Tue, 01 Jun 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/modules/10_io/</guid>
    <description><![CDATA[这个系列我们开始学习 Go 语言的第五个部分: 库。 接下来我们就从 Go 的文件 I/O 说起。 1. 文件 IO 概述 Go 的标准库我们就从文件 IO 开始。Go 标准库中为文件 IO 提供]]></description>
</item><item>
    <title>go Context</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_11/</link>
    <pubDate>Mon, 10 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_11/</guid>
    <description><![CDATA[1. Context 概述 所谓上下文指的是在 API 之间或者方法调用之间，所传递的除了业务参数之外的额外信息，比如服务追踪。Go 标准库中的 Context 不仅仅传递上下文信息还提]]></description>
</item></channel>
</rss>
