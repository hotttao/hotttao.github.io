<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Go - 分类 - LoveIt</title>
        <link>https://hotttao.github.io/categories/go/</link>
        <description>Go - 分类 - LoveIt</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1556824234@qq.com (宋涛)</managingEditor>
            <webMaster>1556824234@qq.com (宋涛)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 01 Jul 2021 22:00:00 &#43;0800</lastBuildDate><atom:link href="https://hotttao.github.io/categories/go/" rel="self" type="application/rss+xml" /><item>
    <title>Go 并发调试工具</title>
    <link>https://hotttao.github.io/posts/program/go/tool/go_exe/race_check/</link>
    <pubDate>Thu, 01 Jul 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/tool/go_exe/race_check/</guid>
    <description><![CDATA[Go 语言提供了一些并发调试工具，这些工具可以帮我们有效的发现并发编程中的 bug 1. Go race detector Go race detector可以帮助我们自动发现程序有没有数据竞争(]]></description>
</item><item>
    <title>Once 实现单例</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_8/</link>
    <pubDate>Fri, 07 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_8/</guid>
    <description><![CDATA[Once 有且仅有一次执行 1. Once 概述 Once 可以用来执行且仅仅执行一次动作：Once 常常用来初始化单例资源，或者并发访问只需初始化一次的共享资源，或者在测试]]></description>
</item><item>
    <title>Cond 条件变量</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_7/</link>
    <pubDate>Thu, 06 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_7/</guid>
    <description><![CDATA[Cond 条件变量 1. Cond 概述 Go 标准库提供 Cond 原语的目的是，为等待 / 通知场景下的并发问题提供支持。Cond 通常应用于等待某个条件的一组 goroutine，]]></description>
</item><item>
    <title>WaitGroup</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_6/</link>
    <pubDate>Wed, 05 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_6/</guid>
    <description><![CDATA[WaitGroup 任务编排 1. WaitGroup 使用 WaitGroup 很简单，就是 package sync 用来做任务编排的一个并发原语。它要解决的就是并发 - 等待的问题: goroutine A 等待一组 goroutine 全部完成。 很多操作系统和编程]]></description>
</item><item>
    <title>RWMutex</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_5/</link>
    <pubDate>Tue, 04 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_5/</guid>
    <description><![CDATA[读写锁 RWMutex 1. RWMutex 使用 标准库中的 RWMutex 是一个 reader/writer 互斥锁，用来解决并发读写问题，特别适用于读多写少的场景。RWMutex 在某一时刻只能由任意数量的 reader 持有，]]></description>
</item><item>
    <title>Mutex 扩展</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_4/</link>
    <pubDate>Mon, 03 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_4/</guid>
    <description><![CDATA[如何基于 Mutex 实现一个可重入锁 1. Mutex 的扩展 上一节我们介绍了 Mutex 的实现原理，这一节我们来看看如何基于标准库的 Mutex 来扩展 Mutex 提供的并发原语，包括: 实现一个可]]></description>
</item><item>
    <title>Go Mutex 设计与实现</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_2/</link>
    <pubDate>Sun, 02 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_2/</guid>
    <description><![CDATA[Go 第一个并发原语 Mutex 互斥锁 1. Mutex 的使用 互斥锁是最基本的并发原语，使用互斥锁，限定临界区只能同时由一个线程持有。基本上所有编程语言都会提供，Go 中]]></description>
</item><item>
    <title>go 并发编程入门指南</title>
    <link>https://hotttao.github.io/posts/program/go/sync/go_sync_1/</link>
    <pubDate>Sat, 01 May 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/sync/go_sync_1/</guid>
    <description><![CDATA[这个系列我们开始学习 Go 语言的第四个部分: 并发编程。 1. 学习内容 Go 语言的并发编程，我们学习的核心内容来自于极客时间的专栏Go 并发编程实战课，作者]]></description>
</item><item>
    <title>go hacker 编程</title>
    <link>https://hotttao.github.io/posts/program/go/grammar/go_11/</link>
    <pubDate>Mon, 11 Jan 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/grammar/go_11/</guid>
    <description><![CDATA[每个语言都有一些 hacker 编程，这些 hacker 编程在某些时候能起到奇效，但是不能被乱用。 1. 获取 goroutine id 获取 goroutine id，方式有两种，分别是 简单方式：通过 runtime.Stack 方法获取栈帧]]></description>
</item><item>
    <title>go 包和管理工具</title>
    <link>https://hotttao.github.io/posts/program/go/grammar/go_10/</link>
    <pubDate>Sun, 10 Jan 2021 22:00:00 &#43;0800</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/program/go/grammar/go_10/</guid>
    <description><![CDATA[go 程序包组织结构和程序管理工具箱 1. 包简介 包和模块的概念几乎存在于所有的编程语言之中，它的存在是为了简化大型程序的设计和维护工作。通过将一组相]]></description>
</item></channel>
</rss>
