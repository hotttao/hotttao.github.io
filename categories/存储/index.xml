<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>存储 - 分类 - LoveIt</title>
        <link>https://hotttao.github.io/categories/%E5%AD%98%E5%82%A8/</link>
        <description>存储 - 分类 - LoveIt</description>
        <generator>Hugo -- gohugo.io</generator><language>zh-CN</language><managingEditor>1556824234@qq.com (宋涛)</managingEditor>
            <webMaster>1556824234@qq.com (宋涛)</webMaster><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 29 Mar 2020 00:00:00 &#43;0000</lastBuildDate><atom:link href="https://hotttao.github.io/categories/%E5%AD%98%E5%82%A8/" rel="self" type="application/rss+xml" /><item>
    <title>29 MYSQL 分区表</title>
    <link>https://hotttao.github.io/posts/architecture/mysql/mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/61_%E5%88%86%E5%8C%BA%E8%A1%A8/</link>
    <pubDate>Sun, 29 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/architecture/mysql/mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/61_%E5%88%86%E5%8C%BA%E8%A1%A8/</guid>
    <description><![CDATA[要不要使用分区表 1. 分区表 为了说明分区表的组织形式，先创建一个表 t： 1 2 3 4 5 6 7 8 9 10 11 CREATE TABLE `t` ( `ftime` datetime NOT NULL, `c` int(11) DEFAULT NULL, KEY (`ftime`) ) ENGINE=InnoDB DEFAULT CHARSET=latin1 PARTITION BY RANGE (YEAR(ftime)) (PARTITION p_2017 VALUES LESS]]></description>
</item><item>
    <title>28 MySQL 连接管理</title>
    <link>https://hotttao.github.io/posts/architecture/mysql/mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/52_%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/</link>
    <pubDate>Sat, 28 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/architecture/mysql/mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/52_%E8%BF%9E%E6%8E%A5%E7%AE%A1%E7%90%86/</guid>
    <description><![CDATA[MySQL 的连接管理 2. mysql 连接管理 在 MySQL 中有两个 kill 命令： kill query + 线程 id: 表示终止这个线程中正在执行的语句； kill connection + 线程 id: connection 可缺省，表示断开这个线程的连接，如果]]></description>
</item><item>
    <title>27 MYSQL flush privileges</title>
    <link>https://hotttao.github.io/posts/architecture/mysql/mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/51_grant_privileges/</link>
    <pubDate>Fri, 27 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/architecture/mysql/mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/51_grant_privileges/</guid>
    <description><![CDATA[grant 之后要不要跟 flush privileges 1. 用户权限 MySQL 使用 create user 来创建用户。 create user 'ua'@'%' identified by 'pa'; 的执行过程如下: 磁盘上，往 mysql.user 表里插入一行，由于没有指定权限，所以这行数据上所有]]></description>
</item><item>
    <title>26 MYSQL 自增主键</title>
    <link>https://hotttao.github.io/posts/architecture/mysql/mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/45_%E8%87%AA%E5%A2%9E%E4%B8%BB%E9%94%AE/</link>
    <pubDate>Thu, 26 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/architecture/mysql/mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/45_%E8%87%AA%E5%A2%9E%E4%B8%BB%E9%94%AE/</guid>
    <description><![CDATA[自增主键为什么不连续 1. 自增值 1.1 自增值的保存 表的结构定义存放在后缀名为.frm 的文件中，但是并不会保存自增值。不同的引擎对于自增值的保存策略不]]></description>
</item><item>
    <title>25 MYSQL Memory 存储引擎</title>
    <link>https://hotttao.github.io/posts/architecture/mysql/mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/44_memory%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</link>
    <pubDate>Wed, 25 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/architecture/mysql/mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/44_memory%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E/</guid>
    <description><![CDATA[什么时候使用 Memory 存储引擎 1. 索引组织对比 假设有以下的两张表 t1 和 t2，其中表 t1 使用 Memory 引擎， 表 t2 使用 InnoDB 引擎。 1 2 3 4 create table t1(id int primary key, c int) engine=Memory; create table t2(id int primary key, c]]></description>
</item><item>
    <title>24 临时表</title>
    <link>https://hotttao.github.io/posts/architecture/mysql/mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/43_%E4%B8%B4%E6%97%B6%E8%A1%A8/</link>
    <pubDate>Tue, 24 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/architecture/mysql/mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/43_%E4%B8%B4%E6%97%B6%E8%A1%A8/</guid>
    <description><![CDATA[什么时候会使用临时表 1. 临时表 1.1 临时表跟内存表 内存表，指的是使用 Memory 引擎的表，建表语法是 create table … engine=memory。这种表的数据都保存在内]]></description>
</item><item>
    <title>23 join</title>
    <link>https://hotttao.github.io/posts/architecture/mysql/mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/42_join/</link>
    <pubDate>Mon, 23 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/architecture/mysql/mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/42_join/</guid>
    <description><![CDATA[join 语句是怎么执行的 1. 实验环境 1 2 3 4 5 CREATE TABLE `t2` ( `id` int(11) NOT NULL, `a` int(11) DEFAULT NULL, `b` int(11) DEFAULT NULL, PRIMARY KEY (`id`), KEY `a` (`a`)) ENGINE=InnoDB; drop procedure idata;delimiter ;;create procedure idata()begin declare i int; set i=1; while(i&lt;=1000)do insert into t2 values(i, i, i); set i=i+1; end while;end;;delimiter ;call idata(); create table t1 like]]></description>
</item><item>
    <title>22 常见语句的执行逻辑</title>
    <link>https://hotttao.github.io/posts/architecture/mysql/mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/41_count/</link>
    <pubDate>Sun, 22 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/architecture/mysql/mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/41_count/</guid>
    <description><![CDATA[count，order by 都是怎么执行的 1. count 在不同的 MySQL 引擎中，count(*) 有不同的实现方式: MyISAM: 把一个表的总行数存在了磁盘上，在没有筛选条件]]></description>
</item><item>
    <title>21 MySQL 表复制</title>
    <link>https://hotttao.github.io/posts/architecture/mysql/mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/27_%E8%A1%A8%E5%A4%8D%E5%88%B6/</link>
    <pubDate>Sat, 21 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/architecture/mysql/mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/27_%E8%A1%A8%E5%A4%8D%E5%88%B6/</guid>
    <description><![CDATA[怎么最快的复制一张表 1. 在两张表中拷贝数据 如果可以控制对源表的扫描行数和加锁范围很小的话，我们简单地使用 insert … select 语句即可实现。当然，为了避免对源]]></description>
</item><item>
    <title>20 MySQL 误删恢复</title>
    <link>https://hotttao.github.io/posts/architecture/mysql/mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/26_%E8%AF%AF%E5%88%A0%E6%81%A2%E5%A4%8D/</link>
    <pubDate>Fri, 20 Mar 2020 00:00:00 &#43;0000</pubDate>
    <author>作者</author>
    <guid>https://hotttao.github.io/posts/architecture/mysql/mysql%E5%AE%9E%E6%88%9845%E8%AE%B2/26_%E8%AF%AF%E5%88%A0%E6%81%A2%E5%A4%8D/</guid>
    <description><![CDATA[误删数据恢复 1. 误删数据 传统的高可用架构是不能预防误删数据的，因为主库的一个 drop table 命令，会通过 binlog 传给所有从库和级联从库，进而导致整个集群的实例都]]></description>
</item></channel>
</rss>
